document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const beverageTypeOptions = document.querySelectorAll('.beverage-type-option');
    const beverageSizeOptions = document.querySelectorAll('.beverage-size-option');
    const increaseQuantityBtn = document.querySelector('.inc-quantity');
    const decreaseQuantityBtn = document.querySelector('.dec-quantity');
    const currentQuantityElem = document.querySelector('.quantity-input');
    const addToCartBtn = document.getElementById('add-to-cart-btn');
    const startVerificationBtn = document.getElementById('start-verification-btn');
    const shopCartItemsContainer = document.getElementById('shopping-cart-items');
    const cartTotalElem = document.getElementById('cart-total');
    const paymentTotalElem = document.getElementById('payment-total');
    const beverageTypeSelectionScreen = document.getElementById('beverage-type-selection');
    const beverageSizeSelectionScreen = document.getElementById('beverage-size-selection');
    const shoppingCartScreen = document.getElementById('shopping-cart');
    const ageVerificationScreen = document.getElementById('age-verification');
    const paymentScreen = document.getElementById('payment-screen');
    const dispensingScreen = document.getElementById('dispensing-screen');
    const orderCompleteScreen = document.getElementById('order-complete-screen');
    const progressBar = document.querySelector('.progress');
    const stepSelection = document.getElementById('step-selection');
    const stepCart = document.getElementById('step-cart');
    const stepVerification = document.getElementById('step-verification');
    const stepPayment = document.getElementById('step-payment');
    const stepDispensing = document.getElementById('step-dispensing');
    const webcamElement = document.getElementById('webcam');
    const captureButton = document.getElementById('capture-button');
    const retryButton = document.getElementById('retry-capture');
    const webcamContainer = document.getElementById('webcam-container');
    const capturedImageContainer = document.getElementById('captured-image-container');
    const capturedImage = document.getElementById('captured-image');
    const verificationResult = document.getElementById('verification-result');
    const webcamStatus = document.getElementById('webcam-status');
    const continueToPaymentBtn = document.getElementById('continue-to-payment-btn');
    const backToCartBtn = document.getElementById('back-to-cart-btn');
    const backToVerificationBtn = document.getElementById('back-to-verification-btn');
    const backToTypeBtn = document.getElementById('back-to-type-btn');
    const payNowBtn = document.getElementById('pay-now-btn');
    const paymentItems = document.getElementById('payment-items-total');
    const paymentVat = document.getElementById('payment-vat');
    
    // State variables
    let selectedBeverage = null; // Start with no selection
    let selectedSize = 500; // Default selection (500ml)
    let currentQuantity = 1;
    let cartItems = [];
    let webcam = null;
    let verificationInProgress = false;
    let dispensingComplete = false;
    let dispensingMonitorInterval = null;
    
    // Initialize the UI
    initializeUI();
    
    // Attach event listeners
    attachEventListeners();
    
    /**
     * Initialize the UI components and state
     */
    function initializeUI() {
        // Clear any selected state initially
        beverageTypeOptions.forEach(option => {
            option.classList.remove('selected');
        });
        
        beverageSizeOptions.forEach(option => {
            option.classList.remove('selected');
        });
        
        restoreState();
    }
    
    /**
     * Attach event listeners to interactive elements
     */
    function attachEventListeners() {
        // Beverage type selection
        beverageTypeOptions.forEach(option => {
            option.addEventListener('click', () => {
                const type = option.getAttribute('data-type');
                selectBeverage(type);
            });
        });
        
        // Beverage size selection
        beverageSizeOptions.forEach(option => {
            option.addEventListener('click', () => {
                const size = parseInt(option.getAttribute('data-size'), 10);
                selectSize(size);
            });
        });
        
        // Quantity controls
        if (increaseQuantityBtn) {
            increaseQuantityBtn.addEventListener('click', increaseQuantity);
        }
        
        if (decreaseQuantityBtn) {
            decreaseQuantityBtn.addEventListener('click', decreaseQuantity);
        }
        
        // Quick quantity buttons
        const quickQuantityBtns = document.querySelectorAll('.quick-quantity-btn');
        quickQuantityBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const quantity = parseInt(btn.getAttribute('data-quantity'), 10);
                currentQuantity = quantity;
                if (currentQuantityElem) {
                    currentQuantityElem.value = currentQuantity;
                }
                saveState();
            });
        });
        
        // Add to cart
        if (addToCartBtn) {
            addToCartBtn.addEventListener('click', addToCart);
        }
        
        // Start verification button
        if (startVerificationBtn) {
            startVerificationBtn.addEventListener('click', () => {
                if (cartItems.length > 0) {
                    const hasAlcohol = cartItems.some(item => item.beverage === 'beer');
                    
                    if (hasAlcohol) {
                        // If alcohol is in the cart, show verification screen
                        showScreen('age-verification');
                        updateProgressStep('verification');
                        startWebcam();
                    } else {
                        // No alcohol, skip verification and go to payment
                        showScreen('payment-screen');
                        updateProgressStep('payment');
                        updatePaymentSummary();
                    }
                }
            });
        }
        
        // Webcam capture button
        if (captureButton) {
            captureButton.addEventListener('click', captureWebcamImage);
        }
        
        // Retry capture button
        if (retryButton) {
            retryButton.addEventListener('click', resetWebcam);
        }
        
        // Continue to payment button
        if (continueToPaymentBtn) {
            continueToPaymentBtn.addEventListener('click', () => {
                showScreen('payment-screen');
                updateProgressStep('payment');
                updatePaymentSummary();
                stopWebcam();
            });
        }
        
        // Back to cart button
        if (backToCartBtn) {
            backToCartBtn.addEventListener('click', () => {
                showScreen('shopping-cart');
                updateProgressStep('cart');
                stopWebcam();
            });
        }
        
        // Back to verification button (from payment)
        if (backToVerificationBtn) {
            backToVerificationBtn.addEventListener('click', () => {
                const hasAlcohol = cartItems.some(item => item.beverage === 'beer');
                
                if (hasAlcohol) {
                    showScreen('age-verification');
                    updateProgressStep('verification');
                    startWebcam();
                } else {
                    showScreen('shopping-cart');
                    updateProgressStep('cart');
                }
            });
        }
        
        // Pay now button
        if (payNowBtn) {
            payNowBtn.addEventListener('click', () => {
                // Pay and proceed to dispensing
                payNowBtn.disabled = true;
                payNowBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> ' + 
                    (document.documentElement.lang === 'sk' ? 'Spracovávam...' : 'Processing...');
                
                // Simulate payment processing
                setTimeout(() => {
                    // Proceed to dispensing
                    showScreen('dispensing-screen');
                    
                    // Update progress indicator
                    updateProgressStep('dispensing');
                    
                    // Start the dispensing process
                    startDispensing();
                    
                    // Reset payment button state
                    payNowBtn.disabled = false;
                    payNowBtn.innerHTML = document.documentElement.lang === 'sk' ? 
                        'Zaplatiť a čapovať <i class="fas fa-chevron-right ms-2"></i>' : 
                        'Pay & Dispense <i class="fas fa-chevron-right ms-2"></i>';
                }, 1000);
            });
        }
        
        // Back to type button
        if (backToTypeBtn) {
            backToTypeBtn.addEventListener('click', () => {
                showScreen('beverage-type-selection');
            });
        }
    }
    
    /**
     * Select a beverage type
     * 
     * @param {string} type - The type of beverage (beer, kofola, birel)
     */
    function selectBeverage(type) {
        selectedBeverage = type;
        
        // Update UI
        beverageTypeOptions.forEach(option => {
            if (option.getAttribute('data-type') === type) {
                option.classList.add('selected');
            } else {
                option.classList.remove('selected');
            }
        });
        
        // Enable proceed button
        const nextScreenBtn = document.getElementById('continue-type-btn');
        if (nextScreenBtn) {
            nextScreenBtn.disabled = false;
            
            // Add click event if not already added
            if (!nextScreenBtn.hasAttribute('data-event-attached')) {
                nextScreenBtn.addEventListener('click', () => {
                    showScreen('beverage-size-selection');
                });
                nextScreenBtn.setAttribute('data-event-attached', 'true');
            }
        }
        
        // Save state
        saveState();
    }
    
    /**
     * Select a beverage size
     * 
     * @param {number} size - The size in ml (300 or 500)
     */
    function selectSize(size) {
        selectedSize = size;
        
        // Update UI
        beverageSizeOptions.forEach(option => {
            if (parseInt(option.getAttribute('data-size'), 10) === size) {
                option.classList.add('selected');
            } else {
                option.classList.remove('selected');
            }
        });
        
        // Update price display
        const priceDisplay = document.getElementById('price-display');
        if (priceDisplay) {
            const price = calculatePrice(selectedBeverage, selectedSize);
            priceDisplay.textContent = `€${price.toFixed(2)}`;
        }
        
        // Save state
        // Enable the continue button
        const goToCartBtn = document.getElementById("view-cart-from-size-btn");
        if (goToCartBtn) {
            goToCartBtn.disabled = false;
            
            // Add click event if not already added
            if (!goToCartBtn.hasAttribute("data-event-attached")) {
                goToCartBtn.addEventListener("click", () => {
                    showScreen("shopping-cart");
                });
                goToCartBtn.setAttribute("data-event-attached", "true");
            }
        }

        saveState();
    }
    /**
     * Increase the quantity of the current selection
     */
    function increaseQuantity() {
        currentQuantity++;
        if (currentQuantityElem) {
            currentQuantityElem.value = currentQuantity;
        }
        
        // Save state
        saveState();
    }
    
    /**
     * Decrease the quantity of the current selection
     */
    function decreaseQuantity() {
        if (currentQuantity > 1) {
            currentQuantity--;
            if (currentQuantityElem) {
                currentQuantityElem.value = currentQuantity;
            }
        }
        
        // Save state
        saveState();
    }
    
    /**
     * Add the current selection to the cart
     */
    function addToCart() {
        for (let i = 0; i < currentQuantity; i++) {
            const price = calculatePrice(selectedBeverage, selectedSize);
            cartItems.push({
                beverage: selectedBeverage,
                size: selectedSize,
                price: price
            });
        }
        
        // Reset quantity to 1
        currentQuantity = 1;
        if (currentQuantityElem) {
            currentQuantityElem.value = currentQuantity;
        }
        
        // Update cart display
        updateCartDisplay();
        
        // Show a confirmation message
        displayMessage(document.documentElement.lang === 'sk' ?
            'Položka pridaná do košíka. Vyberte ďalší nápoj alebo prejdite do košíka.' :
            'Item added to cart. Select another beverage or proceed to cart.',
            'success'
        );
        
        // Enable the go to cart button
        const goToCartBtn = document.getElementById('view-cart-from-size-btn');
        if (goToCartBtn) {
            goToCartBtn.disabled = false;
            
            // Add click event if not already added
            if (!goToCartBtn.hasAttribute('data-event-attached')) {
                goToCartBtn.addEventListener('click', () => {
                    showScreen('shopping-cart');
                    updateProgressStep('cart');
                });
                goToCartBtn.setAttribute('data-event-attached', 'true');
            }
        }
        
        // Save state
        saveState();
    }
    
    /**
     * Calculate the price for a beverage and size
     * 
     * @param {string} beverage - The type of beverage
     * @param {number} size - The size in ml
     * @returns {number} - The calculated price
     */
    function calculatePrice(beverage, size) {
        // Base prices per 100ml
        const pricesPer100ml = {
            beer: 0.64,
            kofola: 0.48,
            birel: 0.52
        };
        
        // Calculate the price based on size
        return pricesPer100ml[beverage] * (size / 100) * (1 - (size === 500 ? 0.2 : 0)); // 20% discount for 500ml
    }
    
    /**
     * Update the cart display with the current items
     */
    function updateCartDisplay() {
        if (!shopCartItemsContainer) return;
        
        // Clear existing items
        shopCartItemsContainer.innerHTML = '';
        
        // Calculate total
        let total = 0;
        
        // Check if cart is empty
        if (cartItems.length === 0) {
            const emptyCartMessage = document.createElement('div');
            emptyCartMessage.className = 'text-center py-4';
            emptyCartMessage.innerHTML = `<p class="text-muted">${document.documentElement.lang === 'sk' ? 'Váš košík je prázdny' : 'Your cart is empty'}</p>`;
            shopCartItemsContainer.appendChild(emptyCartMessage);
            
            // Disable checkout button
            if (startVerificationBtn) {
                startVerificationBtn.disabled = true;
            }
        } else {
            // Add each item to the cart
            cartItems.forEach((item, index) => {
                total += item.price;
                
                const itemElement = document.createElement('div');
                itemElement.className = 'cart-item d-flex justify-content-between align-items-center p-2 border-bottom';
                
                // Beverage name localization
                let beverageName = item.beverage;
                if (document.documentElement.lang === 'sk') {
                    switch(item.beverage) {
                        case 'beer': beverageName = 'Pivo'; break;
                        case 'kofola': beverageName = 'Kofola'; break;
                        case 'birel': beverageName = 'Birel'; break;
                    }
                }
                
                itemElement.innerHTML = `
                    <div>
                        <span class="fw-bold">${beverageName}</span>
                        <span class="text-muted ms-2">${item.size}ml</span>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="me-3">€${item.price.toFixed(2)}</span>
                        <button type="button" class="btn btn-sm btn-outline-danger remove-item" data-index="${index}">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                
                shopCartItemsContainer.appendChild(itemElement);
            });
            
            // Add event listeners to remove buttons
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', () => {
                    const index = parseInt(button.getAttribute('data-index'), 10);
                    removeFromCart(index);
                });
            });
            
            // Enable checkout button
            if (startVerificationBtn) {
                startVerificationBtn.disabled = false;
            }
        }
        
        // Update total display
        if (cartTotalElem) {
            cartTotalElem.textContent = `€${total.toFixed(2)}`;
        }
    }
    
    /**
     * Remove an item from the cart
     * 
     * @param {number} index - The index of the item to remove
     */
    function removeFromCart(index) {
        if (index >= 0 && index < cartItems.length) {
            cartItems.splice(index, 1);
            updateCartDisplay();
            saveState();
        }
    }
    
    /**
     * Restore the user interface state from session
     */
    function restoreState() {
        // Attempt to restore state from server or localStorage
        fetch('/api/get_state')
            .then(response => response.json())
            .then(data => {
                if (data && data.state) {
                    // Restore state
                    selectedBeverage = data.state.selectedBeverage || selectedBeverage;
                    selectedSize = data.state.selectedSize || selectedSize;
                    currentQuantity = data.state.currentQuantity || currentQuantity;
                    cartItems = data.state.cartItems || cartItems;
                    
                    // Update UI based on restored state
                    beverageTypeOptions.forEach(option => {
                        if (option.getAttribute('data-type') === selectedBeverage) {
                            option.classList.add('selected');
                        } else {
                            option.classList.remove('selected');
                        }
                    });
                    
                    beverageSizeOptions.forEach(option => {
                        if (parseInt(option.getAttribute('data-size'), 10) === selectedSize) {
                            option.classList.add('selected');
                        } else {
                            option.classList.remove('selected');
                        }
                    });
                    
                    if (currentQuantityElem) {
                        currentQuantityElem.value = currentQuantity;
                    }
                    
                    updateCartDisplay();
                    
                    // Restore screen if needed
                    if (data.state.currentScreen) {
                        restoreUIState(data.state.currentScreen);
                    }
                }
            })
            .catch(error => {
                console.error('Error restoring state:', error);
            });
    }
    
    /**
     * Save the current state to session
     */
    function saveState() {
        // Save to server
        saveStateToServer();
    }
    
    /**
     * Save state to server
     */
    function saveStateToServer() {
        const state = {
            selectedBeverage,
            selectedSize,
            currentQuantity,
            cartItems,
            currentScreen: getCurrentScreen()
        };
        
        fetch('/api/save_state', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({state})
        })
        .catch(error => {
            console.error('Error saving state:', error);
        });
    }
    
    /**
     * Get the current screen ID
     * 
     * @returns {string} - The ID of the currently visible screen
     */
    function getCurrentScreen() {
        if (beverageTypeSelectionScreen && !beverageTypeSelectionScreen.classList.contains('d-none')) return 'beverage-type-selection';
        if (beverageSizeSelectionScreen && !beverageSizeSelectionScreen.classList.contains('d-none')) return 'beverage-size-selection';
        if (shoppingCartScreen && !shoppingCartScreen.classList.contains('d-none')) return 'shopping-cart';
        if (ageVerificationScreen && !ageVerificationScreen.classList.contains('d-none')) return 'age-verification';
        if (paymentScreen && !paymentScreen.classList.contains('d-none')) return 'payment-screen';
        if (dispensingScreen && !dispensingScreen.classList.contains('d-none')) return 'dispensing-screen';
        if (orderCompleteScreen && !orderCompleteScreen.classList.contains('d-none')) return 'order-complete-screen';
        return 'beverage-type-selection'; // Default
    }
    
    /**
     * Restore the UI state based on the screen name
     * 
     * @param {string} screenName - The name of the screen to show
     */
    function restoreUIState(screenName) {
        // Hide all screens
        hideAllScreens();
        
        // Show the requested screen
        switch(screenName) {
            case 'beverage-type-selection':
                if (beverageTypeSelectionScreen) {
                    beverageTypeSelectionScreen.classList.remove('d-none');
                    updateProgressStep('selection');
                }
                break;
            case 'beverage-size-selection':
                if (beverageSizeSelectionScreen) {
                    beverageSizeSelectionScreen.classList.remove('d-none');
                    updateProgressStep('selection');
                }
                break;
            case 'shopping-cart':
                if (shoppingCartScreen) {
                    shoppingCartScreen.classList.remove('d-none');
                    updateProgressStep('cart');
                }
                break;
            case 'age-verification':
                if (ageVerificationScreen) {
                    ageVerificationScreen.classList.remove('d-none');
                    updateProgressStep('verification');
                    startWebcam();
                }
                break;
            case 'payment-screen':
                if (paymentScreen) {
                    paymentScreen.classList.remove('d-none');
                    updateProgressStep('payment');
                    updatePaymentSummary();
                }
                break;
            case 'dispensing-screen':
                if (dispensingScreen) {
                    dispensingScreen.classList.remove('d-none');
                    updateProgressStep('dispensing');
                    monitorOrderProgress();
                }
                break;
            case 'order-complete-screen':
                if (orderCompleteScreen) {
                    orderCompleteScreen.classList.remove('d-none');
                }
                break;
            default:
                if (beverageTypeSelectionScreen) {
                    beverageTypeSelectionScreen.classList.remove('d-none');
                    updateProgressStep('selection');
                }
        }
    }
    
    /**
     * Hide all screens
     */
    function hideAllScreens() {
        if (beverageTypeSelectionScreen) beverageTypeSelectionScreen.classList.add('d-none');
        if (beverageSizeSelectionScreen) beverageSizeSelectionScreen.classList.add('d-none');
        if (shoppingCartScreen) shoppingCartScreen.classList.add('d-none');
        if (ageVerificationScreen) ageVerificationScreen.classList.add('d-none');
        if (paymentScreen) paymentScreen.classList.add('d-none');
        if (dispensingScreen) dispensingScreen.classList.add('d-none');
        if (orderCompleteScreen) orderCompleteScreen.classList.add('d-none');
    }
    
    /**
     * Show a specific screen
     * 
     * @param {string} screenName - The ID of the screen to show
     */
    function showScreen(screenName) {
        hideAllScreens();
        
        // Show the requested screen
        switch(screenName) {
            case 'beverage-type-selection':
                if (beverageTypeSelectionScreen) {
                    beverageTypeSelectionScreen.classList.remove('d-none');
                    updateProgressStep('selection');
                }
                break;
            case 'beverage-size-selection':
                if (beverageSizeSelectionScreen) {
                    beverageSizeSelectionScreen.classList.remove('d-none');
                    updateProgressStep('selection');
                }
                break;
            case 'shopping-cart':
                if (shoppingCartScreen) {
                    shoppingCartScreen.classList.remove('d-none');
                    // Ensure cart display is updated
                    updateCartDisplay();
                    updateProgressStep('cart');
                }
                break;
            case 'age-verification':
                if (ageVerificationScreen) {
                    ageVerificationScreen.classList.remove('d-none');
                    updateProgressStep('verification');
                }
                break;
            case 'payment-screen':
                if (paymentScreen) {
                    paymentScreen.classList.remove('d-none');
                    updateProgressStep('payment');
                }
                break;
            case 'dispensing-screen':
                if (dispensingScreen) {
                    dispensingScreen.classList.remove('d-none');
                    updateProgressStep('dispensing');
                }
                break;
            case 'order-complete-screen':
                if (orderCompleteScreen) {
                    orderCompleteScreen.classList.remove('d-none');
                    updateProgressStep('dispensing');
                }
                break;
        }
        
        // Save the current state
        saveState();
    }
    
    /**
     * Update the progress step indicator
     * 
     * @param {string} step - The current step (selection, cart, verification, payment, dispensing)
     */
    function updateProgressStep(step) {
        if (!stepSelection || !stepCart || !stepVerification || !stepPayment || !stepDispensing) return;
        
        // Reset all steps
        stepSelection.classList.remove('active', 'completed');
        stepCart.classList.remove('active', 'completed');
        stepVerification.classList.remove('active', 'completed');
        stepPayment.classList.remove('active', 'completed');
        stepDispensing.classList.remove('active', 'completed');
        
        // Mark current step as active and previous steps as completed
        switch(step) {
            case 'selection':
                stepSelection.classList.add('active');
                break;
            case 'cart':
                stepSelection.classList.add('completed');
                stepCart.classList.add('active');
                break;
            case 'verification':
                stepSelection.classList.add('completed');
                stepCart.classList.add('completed');
                stepVerification.classList.add('active');
                break;
            case 'payment':
                stepSelection.classList.add('completed');
                stepCart.classList.add('completed');
                stepVerification.classList.add('completed');
                stepPayment.classList.add('active');
                break;
            case 'dispensing':
                stepSelection.classList.add('completed');
                stepCart.classList.add('completed');
                stepVerification.classList.add('completed');
                stepPayment.classList.add('completed');
                stepDispensing.classList.add('active');
                break;
        }
    }
    
    /**
     * Display a message to the user
     * 
     * @param {string} message - The message to display
     * @param {string} type - The type of message (info, success, warning, danger)
     */
    function displayMessage(message, type = 'info') {
        const alertPlaceholder = document.getElementById('alert-placeholder');
        if (!alertPlaceholder) return;
        
        const wrapper = document.createElement('div');
        wrapper.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        alertPlaceholder.appendChild(wrapper);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            const alert = wrapper.querySelector('.alert');
            if (alert) {
                alert.classList.remove('show');
                setTimeout(() => wrapper.remove(), 150);
            }
        }, 5000);
    }
    
    /**
     * Update payment summary information
     */
    function updatePaymentSummary() {
        if (!paymentItems || !paymentVat || !paymentTotalElem) return;
        
        const total = cartItems.reduce((sum, item) => sum + item.price, 0);
        const vat = total * 0.2; // 20% VAT
        
        paymentItems.textContent = `€${(total - vat).toFixed(2)}`;
        paymentVat.textContent = `€${vat.toFixed(2)}`;
        paymentTotalElem.textContent = `€${total.toFixed(2)}`;
        
        // Enable/disable payment button
        if (payNowBtn) {
            payNowBtn.disabled = total <= 0;
        }
    }
    
    /**
     * Initialize webcam for age verification
     */
    function startWebcam() {
        if (webcam) return; // Already started
        
        if (!webcamElement || !webcamContainer || !webcamStatus) return;
        
        // Show webcam container, hide result container
        if (webcamContainer) webcamContainer.classList.remove('d-none');
        if (capturedImageContainer) capturedImageContainer.classList.add('d-none');
        if (verificationResult) {
            verificationResult.classList.add('d-none');
            verificationResult.innerHTML = '';
        }
        
        // Reset continue button
        if (continueToPaymentBtn) continueToPaymentBtn.classList.add('d-none');
        
        // Update status
        webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
            'Inicializácia kamery...' : 
            'Initializing camera...';
        
        // Initialize webcam
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                webcamElement.srcObject = stream;
                webcam = stream;
                
                // Update status
                webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
                    'Kamera pripravená, prosím, pozrite sa priamo do kamery.' : 
                    'Camera ready, please look directly at the camera.';
                
                // Enable capture button
                if (captureButton) captureButton.disabled = false;
            })
            .catch(error => {
                console.error('Error accessing the webcam:', error);
                showWebcamError(document.documentElement.lang === 'sk' ? 
                    'Nepodarilo sa pristúpiť ku kamere. Skontrolujte, či máte povolenú kameru pre túto stránku.' : 
                    'Could not access the camera. Please check that camera access is allowed for this site.'
                );
            });
    }
    
    /**
     * Stop the webcam stream
     */
    function stopWebcam() {
        if (webcam) {
            webcam.getTracks().forEach(track => track.stop());
            webcam = null;
        }
    }
    
    /**
     * Capture an image from the webcam
     */
    function captureWebcamImage() {
        if (!webcamElement || !capturedImage || verificationInProgress) return;
        
        // Set the status
        if (webcamStatus) {
            webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
                'Zachytávam snímku...' : 
                'Capturing image...';
        }
        
        // Disable the capture button during processing
        if (captureButton) captureButton.disabled = true;
        
        try {
            // Create a canvas element to capture the image
            const canvas = document.createElement('canvas');
            canvas.width = webcamElement.videoWidth;
            canvas.height = webcamElement.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(webcamElement, 0, 0, canvas.width, canvas.height);
            
            // Get image data URL
            const imageDataURL = canvas.toDataURL('image/jpeg');
            
            // Display the captured image
            capturedImage.src = imageDataURL;
            webcamContainer.classList.add('d-none');
            capturedImageContainer.classList.remove('d-none');
            
            // Update status
            if (webcamStatus) {
                webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
                    'Overujem vek...' : 
                    'Verifying age...';
            }
            
            // Send the image for verification
            verificationInProgress = true;
            sendImageForVerification(imageDataURL);
        } catch (error) {
            console.error('Error capturing image:', error);
            showWebcamError(document.documentElement.lang === 'sk' ? 
                'Chyba pri zachytávaní snímky. Skúste to znova.' : 
                'Error capturing image. Please try again.'
            );
            
            // Re-enable capture button
            if (captureButton) captureButton.disabled = false;
            verificationInProgress = false;
        }
    }
    
    /**
     * Reset the webcam to try again
     */
    function resetWebcam() {
        // Show webcam container, hide result
        if (webcamContainer) webcamContainer.classList.remove('d-none');
        if (capturedImageContainer) capturedImageContainer.classList.add('d-none');
        if (verificationResult) {
            verificationResult.classList.add('d-none');
            verificationResult.innerHTML = '';
        }
        
        // Reset continue button
        if (continueToPaymentBtn) continueToPaymentBtn.classList.add('d-none');
        
        // Re-enable capture button
        if (captureButton) captureButton.disabled = false;
        
        // Update status
        if (webcamStatus) {
            webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
                'Kamera pripravená, prosím, pozrite sa priamo do kamery.' : 
                'Camera ready, please look directly at the camera.';
        }
        
        verificationInProgress = false;
    }
    
    /**
     * Show webcam error message
     * 
     * @param {string} message - The error message to display
     */
    function showWebcamError(message) {
        if (!webcamStatus) return;
        
        webcamStatus.textContent = message;
        webcamStatus.classList.add('text-danger');
        
        // Show retry button
        if (retryButton) {
            retryButton.classList.remove('d-none');
        }
    }
    
    /**
     * Send the captured image for age verification
     * 
     * @param {string} imageDataURL - The data URL of the captured image
     */
    function sendImageForVerification(imageDataURL) {
        // Extract base64 data from data URL
        const base64Image = imageDataURL.split(',')[1];
        
        // Get the beverage types in the cart
        const beverageTypes = cartItems.map(item => item.beverage);
        
        // Send to the server for verification
        fetch('/api/verify_age', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                image_data: imageDataURL,
                beverage_type: beverageTypes[0] || "beer"
            })
        })
        .then(response => response.json())
        .then(data => {
            // Display verification result
            if (verificationResult) {
                verificationResult.classList.remove('d-none');
                
                if (data.verified) {
                    // Verification successful
                    verificationResult.innerHTML = `
                        <div class="alert alert-success" role="alert">
                            <h4 class="alert-heading"><i class="fas fa-check-circle me-2"></i>${document.documentElement.lang === 'sk' ? 'Overenie úspešné!' : 'Verification Successful!'}</h4>
                            <p>${data.message}</p>
                        </div>
                    `;
                    
                    // Show continue button
                    if (continueToPaymentBtn) {
                        continueToPaymentBtn.classList.remove('d-none');
                    }
                } else {
                    // Verification failed
                    verificationResult.innerHTML = `
                        <div class="alert alert-danger" role="alert">
                            <h4 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>${document.documentElement.lang === 'sk' ? 'Overenie zlyhalo!' : 'Verification Failed!'}</h4>
                            <p>${data.message}</p>
                        </div>
                    `;
                    
                    // Show retry button
                    if (retryButton) {
                        retryButton.classList.remove('d-none');
                    }
                }
            }
            
            // Update status
            if (webcamStatus) {
                webcamStatus.textContent = data.verified ? 
                    (document.documentElement.lang === 'sk' ? 'Overenie dokončené.' : 'Verification complete.') : 
                    (document.documentElement.lang === 'sk' ? 'Overenie zlyhalo.' : 'Verification failed.');
                webcamStatus.classList.remove('text-danger');
            }
            
            verificationInProgress = false;
        })
        .catch(error => {
            console.error('Error verifying age:', error);
            
            // Show error message
            if (verificationResult) {
                verificationResult.classList.remove('d-none');
                verificationResult.innerHTML = `
                    <div class="alert alert-danger" role="alert">
                        <h4 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>${document.documentElement.lang === 'sk' ? 'Chyba!' : 'Error!'}</h4>
                        <p>${document.documentElement.lang === 'sk' ? 
                            'Nastala chyba pri overovaní veku. Skúste to znova.' : 
                            'There was an error verifying your age. Please try again.'}</p>
                    </div>
                `;
            }
            
            // Update status
            if (webcamStatus) {
                webcamStatus.textContent = document.documentElement.lang === 'sk' ? 
                    'Chyba pri overovaní veku. Skúste to znova.' : 
                    'Error verifying age. Please try again.';
                webcamStatus.classList.add('text-danger');
            }
            
            // Show retry button
            if (retryButton) {
                retryButton.classList.remove('d-none');
            }
            
            verificationInProgress = false;
        });
    }
    
    /**
     * Start the beverage dispensing process
     */
    function startDispensing() {
        // Reset dispensing state
        dispensingComplete = false;
        
        // Initialize dispensing UI
        const dispensingStatus = document.getElementById('dispensing-status');
        const dispensingProgress = document.getElementById('dispensing-progress');
        
        if (dispensingStatus) {
            dispensingStatus.textContent = document.documentElement.lang === 'sk' ? 
                'Pripravujem čapovací systém...' : 
                'Preparing dispensing system...';
        }
        
        if (dispensingProgress) {
            dispensingProgress.style.width = '10%';
            dispensingProgress.setAttribute('aria-valuenow', '10');
        }
        
        // Send request to start dispensing
        fetch('/api/start_dispensing', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                order_items: cartItems
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Start monitoring dispensing progress
                monitorOrderProgress();
            } else {
                // Display error
                if (dispensingStatus) {
                    dispensingStatus.textContent = document.documentElement.lang === 'sk' ? 
                        'Chyba pri spúšťaní: ' + data.message : 
                        'Error starting dispense: ' + data.message;
                }
                
                // Stop monitoring after a delay and return to cart
                setTimeout(() => {
                    showScreen('shopping-cart');
                    displayMessage(document.documentElement.lang === 'sk' ? 
                        'Čapovanie zlyhalo. Skúste znova.' : 
                        'Dispensing failed. Please try again.',
                        'danger'
                    );
                }, 3000);
            }
        })
        .catch(error => {
            console.error('Error starting dispensing:', error);
            if (dispensingStatus) {
                dispensingStatus.textContent = document.documentElement.lang === 'sk' ? 
                    'Chyba komunikácie so systémom.' : 
                    'Error communicating with the system.';
            }
        });
    }
    
    function monitorOrderProgress() {
        // Clear any existing interval
        if (dispensingMonitorInterval) {
            clearInterval(dispensingMonitorInterval);
        }
        
        // Set up progress monitoring
        dispensingMonitorInterval = setInterval(() => {
            fetch('/api/dispensing_status')
                .then(response => response.json())
                .then(data => {
                    updateDispenseUI(data);
                    
                    // Check if dispensing is complete
                    if (data.status === 'complete') {
                        // Stop monitoring
                        clearInterval(dispensingMonitorInterval);
                        dispensingMonitorInterval = null;
                        
                        // Show completion screen after a delay
                        setTimeout(() => {
                            showOrderComplete();
                        }, 1000);
                    }
                })
                .catch(error => {
                    console.error('Error monitoring progress:', error);
                });
        }, 1000);
    }
    
    function updateDispenseUI(state) {
        const dispensingStatus = document.getElementById('dispensing-status');
        const dispensingProgress = document.getElementById('dispensing-progress');
        
        if (!dispensingStatus || !dispensingProgress) return;
        
        const language = document.documentElement.lang || 'en';
        
        // Elements for animation
        const beerStream = document.getElementById('beer-stream');
        const beverageCup = document.getElementById('beverage-cup');
        const beerLiquid = document.getElementById('beer-liquid');
        const foam = document.querySelector('.foam');
        
        // Update status text and animations
        switch(state.status) {
            case 'preparing':
                dispensingStatus.textContent = language === 'sk' ? 
                    'Pripravujem čapovací systém...' : 
                    'Preparing dispensing system...';
                
                // Reset animations
                if (beverageCup) {
                    beverageCup.classList.remove('falling', 'delivering');
                    beverageCup.classList.add('d-none');
                }
                if (beerStream) {
                    beerStream.classList.remove('pouring');
                    beerStream.classList.add('d-none');
                }
                if (beerLiquid) {
                    beerLiquid.classList.remove('pouring', 'wobbling');
                    beerLiquid.style.height = '0%';
                }
                if (foam) {
                    foam.classList.remove('showing');
                    foam.style.bottom = '100%';
                }
                break;
                
            case 'dispensing_cup':
                dispensingStatus.textContent = language === 'sk' ? 
                    'Podávam pohár...' : 
                    'Dispensing cup...';
                
                // Cup falling animation
                if (beverageCup) {
                    beverageCup.classList.remove('d-none');
                    beverageCup.classList.add('falling');
                    
                    // Set beer color based on beverage type
                    if (state.current_item && beerLiquid && foam) {
                        const beverageType = state.current_item.beverage;
                        // Reset classes
                        beerLiquid.classList.remove('kofola', 'birel', 'beer');
                        foam.classList.remove('kofola', 'birel', 'beer');
                        
                        // Add appropriate class
                        beerLiquid.classList.add(beverageType);
                        foam.classList.add(beverageType);
                    }
                }
                break;
                
            case 'pouring':
                dispensingStatus.textContent = language === 'sk' ? 
                    `Čapujem ${state.current_item ? state.current_item.beverage : 'nápoj'}...` : 
                    `Pouring ${state.current_item ? state.current_item.beverage : 'beverage'}...`;
                
                // Pour animation
                if (beerStream) {
                    beerStream.classList.remove('d-none');
                    beerStream.classList.add('pouring');
                }
                
                // Beer filling animation
                if (beerLiquid) {
                    setTimeout(() => {
                        beerLiquid.classList.add('pouring');
                    }, 300);
                }
                
                // Foam appears after beer is poured
                if (foam) {
                    setTimeout(() => {
                        foam.classList.add('showing');
                    }, 2000);
                }
                break;
                
            case 'delivering':
                dispensingStatus.textContent = language === 'sk' ? 
                    'Doručujem pohár...' : 
                    'Delivering cup...';
                
                // Stop pouring
                if (beerStream) {
                    beerStream.classList.remove('pouring');
                    beerStream.classList.add('d-none');
                }
                
                // Wobble the liquid for realistic effect
                if (beerLiquid) {
                    beerLiquid.classList.add('wobbling');
                }
                
                // Cup delivery animation
                if (beverageCup) {
                    setTimeout(() => {
                        beverageCup.classList.add('delivering');
                    }, 500);
                }
                break;
                
            case 'complete':
                dispensingStatus.textContent = language === 'sk' ? 
                    'Hotovo! Váš nápoj je pripravený.' : 
                    'Complete! Your beverage is ready.';
                
                // Hide cup as it's been delivered
                if (beverageCup) {
                    setTimeout(() => {
                        beverageCup.classList.add('d-none');
                    }, 2000);
                }
                break;
                
            case 'error':
                dispensingStatus.textContent = language === 'sk' ? 
                    `Chyba: ${state.message || 'Neznáma chyba'}` : 
                    `Error: ${state.message || 'Unknown error'}`;
                break;
                
            default:
                dispensingStatus.textContent = language === 'sk' ? 
                    'Spracovávam...' : 
                    'Processing...';
        }
        
        // Update progress bar
        const progress = state.progress || 0;
        dispensingProgress.style.width = `${progress}%`;
        dispensingProgress.setAttribute('aria-valuenow', String(progress));
    }
    
    function showOrderComplete() {
        // Reset cart
        cartItems = [];
        updateCartDisplay();
        
        // Save state
        saveState();
        
        // Show complete screen
        showScreen('order-complete-screen');
    }
});
