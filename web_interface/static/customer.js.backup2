document.addEventListener('DOMContentLoaded', function() {
    // Common DOM elements
    const bevTypeSelectionScreen = document.getElementById('beverage-type-selection');
    const bevSizeSelectionScreen = document.getElementById('beverage-size-selection');
    const shoppingCartScreen = document.getElementById('shopping-cart');
    const ageVerificationScreen = document.getElementById('age-verification');
    const dispensingScreen = document.getElementById('dispensing-screen');
    const orderCompleteScreen = document.getElementById('order-complete-screen');
    const cartIconContainer = document.getElementById('cart-icon-container');
    const progressContainer = document.getElementById('progress-container');
    
    // Progress steps
    const stepSelection = document.getElementById('step-selection');
    const stepCart = document.getElementById('step-cart');
    const stepVerification = document.getElementById('step-verification');
    const stepPayment = document.getElementById('step-payment');
    const stepDispensing = document.getElementById('step-dispensing');
    const stepPickup = document.getElementById('step-pickup');
    
    // Global state
    let selectedBeverageType = '';
    let selectedSize = null;
    let cartItems = [];
    
    // Initialize UI
    function initializeUI() {
        // Check if we should restore UI state from previous session
        restoreUIState(document.getElementById('current_screen')?.value || '');
        
        // Attach event listeners
        attachEventListeners();
        
        // Initial update of cart UI
        updateCartDisplay();
    }
    
    // Helper to save state to server
    function saveStateToServer() {
        fetch('/save_state', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                current_screen: getCurrentScreen(),
                selected_beverage: selectedBeverageType,
                selected_size: selectedSize,
                cart_items: cartItems
            })
        }).catch(error => console.error('Error saving state:', error));
    }
    
    // Get current visible screen
    function getCurrentScreen() {
        if (!bevTypeSelectionScreen.classList.contains('d-none')) return 'beverage-type-selection';
        if (!bevSizeSelectionScreen.classList.contains('d-none')) return 'beverage-size-selection';
        if (!shoppingCartScreen.classList.contains('d-none')) return 'shopping-cart';
        if (!ageVerificationScreen.classList.contains('d-none')) return 'age-verification';
        if (!dispensingScreen.classList.contains('d-none')) return 'dispensing-screen';
        if (!orderCompleteScreen.classList.contains('d-none')) return 'order-complete-screen';
        return 'beverage-type-selection'; // Default
    }
    
    // Restore UI state based on server data
    function restoreUIState(screenName) {
        // Restore selections from hidden fields
        const storedBeverage = document.getElementById('selected_beverage')?.value || '';
        const storedSize = document.getElementById('selected_size')?.value || '';
        
        if (storedBeverage) {
            selectedBeverageType = storedBeverage;
            // Update beverage selection UI
            const bevOptions = document.querySelectorAll('.beverage-type-option');
            bevOptions.forEach(option => {
                if (option.dataset.type === selectedBeverageType) {
                    option.classList.add('selected');
                    // Update display text
                    const displayEl = document.getElementById('beverage-type-display');
                    if (displayEl && displayEl.querySelector('span')) {
                        displayEl.querySelector('span').textContent = option.querySelector('.card-title').textContent;
                    }
                } else {
                    option.classList.remove('selected');
                }
            });
        }
        
        if (storedSize) {
            selectedSize = parseInt(storedSize, 10);
            // Update size selection UI
            const sizeOptions = document.querySelectorAll('.beverage-size-option');
            sizeOptions.forEach(option => {
                if (parseInt(option.dataset.size, 10) === selectedSize) {
                    option.classList.add('selected');
                } else {
                    option.classList.remove('selected');
                }
            });
        }
        
        // Show the appropriate screen
        if (screenName && screenName !== '') {
            hideAllScreens();
            const screenElement = document.getElementById(screenName);
            if (screenElement) {
                screenElement.classList.remove('d-none');
            }
            
            // Update progress steps as needed
            if (progressContainer) progressContainer.classList.remove('d-none');
            if (screenName === 'beverage-size-selection') {
                if (stepSelection) stepSelection.classList.add('active');
            } else if (screenName === 'shopping-cart') {
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
            } else if (screenName === 'age-verification') {
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                if (stepVerification) stepVerification.classList.add('active');
            } else if (screenName === 'dispensing-screen') {
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                if (stepVerification) stepVerification.classList.add('active');
                if (stepDispensing) stepDispensing.classList.add('active');
            } else if (screenName === 'order-complete-screen') {
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                if (stepVerification) stepVerification.classList.add('active');
                if (stepDispensing) stepDispensing.classList.add('active');
                if (stepPickup) stepPickup.classList.add('active');
            }
        }
    }
    
    // Hide all screens
    function hideAllScreens() {
        bevTypeSelectionScreen?.classList.add('d-none');
        bevSizeSelectionScreen?.classList.add('d-none');
        shoppingCartScreen?.classList.add('d-none');
        ageVerificationScreen?.classList.add('d-none');
        dispensingScreen?.classList.add('d-none');
        orderCompleteScreen?.classList.add('d-none');
    }
    
    function updateCartDisplay() {
        // Update cart count badge
        const cartCount = document.getElementById('cart-count');
        const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);
        
        if (cartCount) {
            cartCount.textContent = totalItems;
        }
        
        // Show/hide cart icon
        if (cartIconContainer) {
            if (totalItems > 0) {
                cartIconContainer.classList.remove('d-none');
            } else {
                cartIconContainer.classList.add('d-none');
            }
        }
        
        // Update checkout button
        const checkoutBtn = document.getElementById('checkout-btn');
        if (checkoutBtn) {
            checkoutBtn.disabled = totalItems === 0;
        }
        
        // Update cart items in shopping cart screen
        const cartItemsContainer = document.getElementById('cart-items-container');
        const emptyCartMessage = document.getElementById('empty-cart-message');
        const cartTotalItems = document.getElementById('cart-total-items');
        const cartTotalPrice = document.getElementById('cart-total-price');
        
        if (!cartItemsContainer) return;
        
        // Clear existing items
        while (cartItemsContainer.firstChild && cartItemsContainer.firstChild !== emptyCartMessage) {
            cartItemsContainer.removeChild(cartItemsContainer.firstChild);
        }
        
        // Show/hide empty cart message
        if (emptyCartMessage) {
            if (cartItems.length === 0) {
                emptyCartMessage.classList.remove('d-none');
            } else {
                emptyCartMessage.classList.add('d-none');
            }
        }
        
        // Add items to cart
        let totalPrice = 0;
        cartItems.forEach((item, index) => {
            const itemPrice = item.size === 300 ? 1.50 : 2.50;
            const subtotal = itemPrice * item.quantity;
            totalPrice += subtotal;
            
            const itemElement = document.createElement('div');
            itemElement.className = 'cart-item d-flex justify-content-between align-items-center py-2';
            itemElement.innerHTML = `
                <div>
                    <h5 class="mb-0">${getBeverageName(item.beverage)}</h5>
                    <p class="text-muted mb-0">${item.size}ml</p>
                </div>
                <div class="d-flex align-items-center">
                    <div class="quantity-selector me-3">
                        <button class="btn btn-sm btn-outline-secondary quantity-decrease" data-index="${index}">
                            <i class="fas fa-minus"></i>
                        </button>
                        <input type="text" class="form-control" value="${item.quantity}" readonly style="width: 40px; text-align: center;">
                        <button class="btn btn-sm btn-outline-secondary quantity-increase" data-index="${index}">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="text-end" style="min-width: 80px;">
                        <p class="mb-0">€${subtotal.toFixed(2)}</p>
                    </div>
                    <button class="btn btn-sm btn-outline-danger ms-2 remove-item" data-index="${index}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
            
            cartItemsContainer.insertBefore(itemElement, emptyCartMessage);
            
            // Add event listeners to the newly created buttons
            const decreaseBtn = itemElement.querySelector('.quantity-decrease');
            const increaseBtn = itemElement.querySelector('.quantity-increase');
            const removeBtn = itemElement.querySelector('.remove-item');
            
            if (decreaseBtn) {
                decreaseBtn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index, 10);
                    if (cartItems[index].quantity > 1) {
                        cartItems[index].quantity--;
                        updateCartDisplay();
                        saveStateToServer();
                    }
                });
            }
            
            if (increaseBtn) {
                increaseBtn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index, 10);
                    if (cartItems[index].quantity < 10) {
                        cartItems[index].quantity++;
                        updateCartDisplay();
                        saveStateToServer();
                    }
                });
            }
            
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index, 10);
                    cartItems.splice(index, 1);
                    updateCartDisplay();
                    saveStateToServer();
                });
            }
        });
        
        // Update totals
        if (cartTotalItems) {
            cartTotalItems.textContent = totalItems;
        }
        
        if (cartTotalPrice) {
            cartTotalPrice.textContent = `€${totalPrice.toFixed(2)}`;
        }
    }
    
    function getBeverageName(type) {
        const names = {
            'beer': 'Šariš 10',
            'kofola': 'Kofola',
            'birel': 'Birel Pomelo&Grep'
        };
        return names[type] || type;
    }
    
    function attachEventListeners() {
        // Beverage Type Selection
        const beverageOptions = document.querySelectorAll('.beverage-type-option');
        const continueTypeBtn = document.getElementById('continue-type-btn');
        const typeDisplay = document.getElementById('beverage-type-display');
        
        beverageOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Update selection
                selectedBeverageType = this.dataset.type;
                
                // Update UI
                beverageOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                
                // Enable continue button
                if (continueTypeBtn) {
                    continueTypeBtn.disabled = false;
                }
                
                // Update display text
                if (typeDisplay && typeDisplay.querySelector('span')) {
                    typeDisplay.querySelector('span').textContent = this.querySelector('.card-title').textContent;
                }
            });
        });
        
        // Continue to Size Selection
        if (continueTypeBtn) {
            continueTypeBtn.addEventListener('click', function() {
                hideAllScreens();
                if (bevSizeSelectionScreen) bevSizeSelectionScreen.classList.remove('d-none');
                if (progressContainer) progressContainer.classList.remove('d-none');
                if (stepSelection) stepSelection.classList.add('active');
                
                // Save state
                saveStateToServer();
            });
        }
        
        // Beverage Size Selection
        const sizeOptions = document.querySelectorAll('.beverage-size-option');
        const addToCartBtn = document.getElementById('add-to-cart-btn');
        const backToTypeBtn = document.getElementById('back-to-type-btn');
        const viewCartFromSizeBtn = document.getElementById('view-cart-from-size-btn');
        
        sizeOptions.forEach(option => {
            option.addEventListener('click', function() {
                // Update selection
                selectedSize = parseInt(this.dataset.size, 10);
                
                // Update UI
                sizeOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                
                // Enable add to cart button
                if (addToCartBtn) {
                    addToCartBtn.disabled = false;
                }
            });
        });
        
        // Back to Type Selection
        if (backToTypeBtn) {
            backToTypeBtn.addEventListener('click', function() {
                hideAllScreens();
                if (bevTypeSelectionScreen) bevTypeSelectionScreen.classList.remove('d-none');
            });
        }
        
        // Quantity controls
        const decQuantityBtn = document.querySelector('.dec-quantity');
        const incQuantityBtn = document.querySelector('.inc-quantity');
        const quantityInput = document.querySelector('.quantity-input');
        const quickQuantityBtns = document.querySelectorAll('.quick-quantity-btn');
        
        if (decQuantityBtn && quantityInput) {
            decQuantityBtn.addEventListener('click', function() {
                const currentVal = parseInt(quantityInput.value, 10);
                if (currentVal > 1) {
                    quantityInput.value = currentVal - 1;
                }
            });
        }
        
        if (incQuantityBtn && quantityInput) {
            incQuantityBtn.addEventListener('click', function() {
                const currentVal = parseInt(quantityInput.value, 10);
                if (currentVal < 10) {
                    quantityInput.value = currentVal + 1;
                }
            });
        }
        
        if (quickQuantityBtns && quantityInput) {
            quickQuantityBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    quantityInput.value = this.dataset.quantity;
                });
            });
        }
        
        // Add to Cart
        if (addToCartBtn && quantityInput) {
            addToCartBtn.addEventListener('click', function() {
                if (!selectedBeverageType || !selectedSize) return;
                
                const quantity = parseInt(quantityInput.value, 10);
                
                // Find if we already have this item
                const existingItemIndex = cartItems.findIndex(
                    item => item.beverage === selectedBeverageType && item.size === selectedSize
                );
                
                if (existingItemIndex >= 0) {
                    // Update existing item
                    cartItems[existingItemIndex].quantity += quantity;
                } else {
                    // Add new item
                    cartItems.push({
                        beverage: selectedBeverageType,
                        size: selectedSize,
                        quantity: quantity
                    });
                }
                
                // Update cart UI
                updateCartDisplay();
                
                // Show view cart button
                if (viewCartFromSizeBtn) {
                    viewCartFromSizeBtn.classList.remove('d-none');
                }
                
                // Reset quantity
                if (quantityInput) {
                    quantityInput.value = 1;
                }
                
                // Deselect size
                selectedSize = null;
                sizeOptions.forEach(opt => opt.classList.remove('selected'));
                
                // Disable add to cart button again
                this.disabled = true;
                
                // Save state
                saveStateToServer();
                
                // Show confirmation
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                });
                
                Toast.fire({
                    icon: 'success',
                    title: 'Item added to cart!'
                });
            });
        }
        
        // View Cart from Size Screen
        if (viewCartFromSizeBtn) {
            viewCartFromSizeBtn.addEventListener('click', function() {
                hideAllScreens();
                if (shoppingCartScreen) shoppingCartScreen.classList.remove('d-none');
                if (progressContainer) progressContainer.classList.remove('d-none');
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                
                // Save state
                saveStateToServer();
            });
        }
        
        // View Cart Button
        const viewCartBtn = document.getElementById('view-cart-btn');
        if (viewCartBtn) {
            viewCartBtn.addEventListener('click', function() {
                hideAllScreens();
                if (shoppingCartScreen) shoppingCartScreen.classList.remove('d-none');
                if (progressContainer) progressContainer.classList.remove('d-none');
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                
                // Save state
                saveStateToServer();
            });
        }
        
        // Continue Shopping Button
        const continueShoppingBtn = document.getElementById('continue-shopping-btn');
        if (continueShoppingBtn) {
            continueShoppingBtn.addEventListener('click', function() {
                hideAllScreens();
                if (bevTypeSelectionScreen) bevTypeSelectionScreen.classList.remove('d-none');
                
                // Save state
                saveStateToServer();
            });
        }
        
        // Checkout Button
        const checkoutBtn = document.getElementById('checkout-btn');
        if (checkoutBtn) {
            checkoutBtn.addEventListener('click', function() {
                // Check if any items in cart need age verification
                const needsVerification = cartItems.some(item => item.beverage === 'beer');
                
                if (needsVerification) {
                    // Show age verification screen
                    hideAllScreens();
                    if (ageVerificationScreen) ageVerificationScreen.classList.remove('d-none');
                    if (progressContainer) progressContainer.classList.remove('d-none');
                    if (stepSelection) stepSelection.classList.add('active');
                    if (stepCart) stepCart.classList.add('active');
                    if (stepVerification) stepVerification.classList.add('active');
                } else {
                    // Go directly to dispensing
                    hideAllScreens();
                    if (dispensingScreen) dispensingScreen.classList.remove('d-none');
                    if (progressContainer) progressContainer.classList.remove('d-none');
                    if (stepSelection) stepSelection.classList.add('active');
                    if (stepCart) stepCart.classList.add('active');
                    if (stepVerification) stepVerification.classList.add('active');
                    if (stepDispensing) stepDispensing.classList.add('active');
                    
                    // Start dispensing process
                    startDispensing();
                }
            });
        }
        
        // Webcam Verify Button
        const webcamVerifyBtn = document.getElementById('webcam-verify-btn');
        if (webcamVerifyBtn) {
            webcamVerifyBtn.addEventListener('click', function() {
                // Show webcam verification interface
                const webcamVerification = document.getElementById('webcam-verification');
                if (webcamVerification) {
                    webcamVerification.classList.remove('d-none');
                }
                
                // Hide verification methods
                const verificationMethods = document.getElementById('verification-methods');
                if (verificationMethods) {
                    verificationMethods.classList.add('d-none');
                }
                
                // Initialize webcam
                initializeWebcam();
            });
        }
        
        // Webcam Start Button
        const webcamStartBtn = document.getElementById('webcam-start-btn');
        if (webcamStartBtn) {
            webcamStartBtn.addEventListener('click', function() {
                startWebcam();
                
                // Enable capture button, disable start button
                const webcamCaptureBtn = document.getElementById('webcam-capture-btn');
                if (webcamCaptureBtn) {
                    webcamCaptureBtn.disabled = false;
                }
                this.disabled = true;
            });
        }
        
        // Webcam Capture Button
        const webcamCaptureBtn = document.getElementById('webcam-capture-btn');
        if (webcamCaptureBtn) {
            webcamCaptureBtn.addEventListener('click', function() {
                captureWebcamImage();
            });
        }
        
        // Webcam Back Button
        const webcamBackBtn = document.getElementById('webcam-back-btn');
        if (webcamBackBtn) {
            webcamBackBtn.addEventListener('click', function() {
                // Hide webcam verification, show verification methods
                const webcamVerification = document.getElementById('webcam-verification');
                const verificationMethods = document.getElementById('verification-methods');
                
                if (webcamVerification) {
                    webcamVerification.classList.add('d-none');
                }
                
                if (verificationMethods) {
                    verificationMethods.classList.remove('d-none');
                }
                
                // Stop webcam
                stopWebcam();
            });
        }
        
        // Webcam Retry Button
        const webcamRetryBtn = document.getElementById('webcam-retry-btn');
        if (webcamRetryBtn) {
            webcamRetryBtn.addEventListener('click', function() {
                // Reset webcam and verification
                const webcamResult = document.getElementById('webcam-result');
                const webcamControls = document.getElementById('webcam-controls');
                
                if (webcamResult) {
                    webcamResult.classList.add('d-none');
                }
                
                if (webcamControls) {
                    webcamControls.classList.remove('d-none');
                }
                
                resetWebcam();
            });
        }
        
        // Webcam Proceed Button
        const webcamProceedBtn = document.getElementById('webcam-proceed-btn');
        if (webcamProceedBtn) {
            webcamProceedBtn.addEventListener('click', function() {
                // Proceed to dispensing
                hideAllScreens();
                if (dispensingScreen) dispensingScreen.classList.remove('d-none');
                if (progressContainer) progressContainer.classList.remove('d-none');
                if (stepSelection) stepSelection.classList.add('active');
                if (stepCart) stepCart.classList.add('active');
                if (stepVerification) stepVerification.classList.add('active');
                if (stepDispensing) stepDispensing.classList.add('active');
                
                // Start dispensing
                startDispensing();
            });
        }
        
        // ID Card Verification Button
        const idCardVerifyBtn = document.getElementById('id-card-verify-btn');
        if (idCardVerifyBtn) {
            idCardVerifyBtn.addEventListener('click', function() {
                // Simulate ID card verification success
                setTimeout(() => {
                    hideAllScreens();
                    if (dispensingScreen) dispensingScreen.classList.remove('d-none');
                    if (progressContainer) progressContainer.classList.remove('d-none');
                    if (stepSelection) stepSelection.classList.add('active');
                    if (stepCart) stepCart.classList.add('active');
                    if (stepVerification) stepVerification.classList.add('active');
                    if (stepDispensing) stepDispensing.classList.add('active');
                    
                    // Start dispensing
                    startDispensing();
                }, 1500);
            });
        }
        
        // Order Complete Continue Button
        const orderCompleteContinueBtn = document.getElementById('order-complete-continue-btn');
        if (orderCompleteContinueBtn) {
            orderCompleteContinueBtn.addEventListener('click', function() {
                // Clear cart and return to beverage selection
                cartItems = [];
                updateCartDisplay();
                
                hideAllScreens();
                if (bevTypeSelectionScreen) bevTypeSelectionScreen.classList.remove('d-none');
                if (progressContainer) progressContainer.classList.add('d-none');
                
                // Remove completed steps
                if (stepSelection) stepSelection.classList.remove('active');
                if (stepCart) stepCart.classList.remove('active');
                if (stepVerification) stepVerification.classList.remove('active');
                if (stepDispensing) stepDispensing.classList.remove('active');
                if (stepPickup) stepPickup.classList.remove('active');
                
                // Save state
                saveStateToServer();
            });
        }
    }
    
    // Initialize the UI when document is loaded
    initializeUI();
    
    // Webcam functionality
    let webcamStream = null;
    const videoElement = document.getElementById('webcam-video');
    const canvasElement = document.getElementById('webcam-canvas');
    
    function initializeWebcam() {
        const webcamStartBtn = document.getElementById('webcam-start-btn');
        const webcamCaptureBtn = document.getElementById('webcam-capture-btn');
        
        if (webcamStartBtn) {
            webcamStartBtn.disabled = false;
        }
        
        if (webcamCaptureBtn) {
            webcamCaptureBtn.disabled = true;
        }
    }
    
    function startWebcam() {
        if (videoElement) {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    webcamStream = stream;
                    videoElement.srcObject = stream;
                    videoElement.play();
                })
                .catch(err => {
                    showWebcamError('Unable to access webcam: ' + err.message);
                });
        }
    }
    
    function stopWebcam() {
        if (webcamStream) {
            webcamStream.getTracks().forEach(track => track.stop());
            webcamStream = null;
        }
    }
    
    function captureWebcamImage() {
        if (!canvasElement || !videoElement || !webcamStream) {
            showWebcamError('Webcam not initialized');
            return;
        }
        
        // Draw video frame to canvas
        const context = canvasElement.getContext('2d');
        canvasElement.width = videoElement.videoWidth;
        canvasElement.height = videoElement.videoHeight;
        context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
        
        // Stop webcam
        stopWebcam();
        
        // Hide controls, show loading
        const webcamControls = document.getElementById('webcam-controls');
        const webcamLoading = document.getElementById('webcam-loading');
        
        if (webcamControls) {
            webcamControls.classList.add('d-none');
        }
        
        if (webcamLoading) {
            webcamLoading.classList.remove('d-none');
        }
        
        // Get canvas data URL
        const imageDataUrl = canvasElement.toDataURL('image/jpeg');
        
        // Send to server for verification
        fetch('/api/verify_age', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                image: imageDataUrl,
                beverage_type: cartItems.length > 0 ? cartItems[0].beverage : 'beer'
            })
        })
        .then(response => response.json())
        .then(data => {
            // Hide loading
            if (webcamLoading) {
                webcamLoading.classList.add('d-none');
            }
            
            // Show result
            const webcamResult = document.getElementById('webcam-result');
            const verificationStatus = document.getElementById('verification-status');
            const estimatedAge = document.getElementById('estimated-age');
            const webcamProceedBtn = document.getElementById('webcam-proceed-btn');
            const webcamRetryBtn = document.getElementById('webcam-retry-btn');
            
            if (webcamResult) {
                webcamResult.classList.remove('d-none');
            }
            
            if (verificationStatus) {
                if (data.verified) {
                    verificationStatus.textContent = 'Verification Successful';
                    verificationStatus.className = 'text-success mb-0';
                    
                    // Enable proceed button
                    if (webcamProceedBtn) {
                        webcamProceedBtn.disabled = false;
                    }
                } else {
                    verificationStatus.textContent = 'Verification Failed';
                    verificationStatus.className = 'text-danger mb-0';
                    
                    // Disable proceed button
                    if (webcamProceedBtn) {
                        webcamProceedBtn.disabled = true;
                    }
                }
            }
            
            if (estimatedAge) {
                estimatedAge.textContent = `Estimated age: ${data.estimated_age || 'Unknown'}`;
            }
        })
        .catch(error => {
            console.error('Verification error:', error);
            
            // Hide loading
            if (webcamLoading) {
                webcamLoading.classList.add('d-none');
            }
            
            // Show error
            showWebcamError('Verification failed: ' + error.message);
        });
    }
    
    function resetWebcam() {
        // Reset webcam UI
        const webcamStartBtn = document.getElementById('webcam-start-btn');
        const webcamCaptureBtn = document.getElementById('webcam-capture-btn');
        
        if (webcamStartBtn) {
            webcamStartBtn.disabled = false;
        }
        
        if (webcamCaptureBtn) {
            webcamCaptureBtn.disabled = true;
        }
    }
    
    function showWebcamError(message) {
        const webcamError = document.getElementById('webcam-error');
        if (webcamError) {
            webcamError.textContent = message;
            webcamError.classList.remove('d-none');
        }
    }
});

// Dispensing functionality
function startDispensing() {
    // Show the dispensing interface
    const statusElement = document.getElementById('dispensing-status');
    if (statusElement) {
        statusElement.textContent = 'Initializing...';
    }
    
    // Get primary beverage from cart
    let primaryBeverageType = 'beer';
    let primarySize = 500;
    
    // cartItems is defined in the DOMContentLoaded scope, so we need to get it from there
    const cartItemsContainer = document.getElementById('cart-items-container');
    if (cartItemsContainer && cartItemsContainer.querySelectorAll) {
        const cartItemElements = cartItemsContainer.querySelectorAll('.cart-item');
        if (cartItemElements.length > 0) {
            const firstItem = cartItemElements[0];
            // Extract beverage name and parse it
            const beverageName = firstItem.querySelector('h5').innerText;
            if (beverageName.includes('Birel')) {
                primaryBeverageType = 'birel';
            } else if (beverageName.includes('Kofola')) {
                primaryBeverageType = 'kofola';
            } else {
                primaryBeverageType = 'beer';
            }
            
            // Extract size
            const sizeText = firstItem.querySelector('.text-muted').innerText;
            if (sizeText.includes('300')) {
                primarySize = 300;
            } else {
                primarySize = 500;
            }
        }
    }
    
    // Call the API to start dispensing
    fetch('/api/dispense', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            beverage_type: primaryBeverageType,
            size_ml: primarySize
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('Dispensing started:', data);
        // Start polling for status
        monitorOrderProgress();
    })
    .catch(error => {
        console.error('Error starting dispensing:', error);
        if (statusElement) {
            statusElement.textContent = 'Error: Failed to start dispensing';
            statusElement.classList.add('text-danger');
        }
    });
}

// Poll for dispensing status
function monitorOrderProgress() {
    const statusElement = document.getElementById('dispensing-status');
    const progressBar = document.getElementById('dispensing-progress');
    
    // Poll for status every 1 second
    const intervalId = setInterval(() => {
        fetch('/api/dispensing_status')
            .then(response => response.json())
            .then(data => {
                updateDispenseUI(data);
                
                if (data.status === 'complete') {
                    clearInterval(intervalId);
                    showOrderComplete();
                } else if (data.status === 'error') {
                    clearInterval(intervalId);
                    if (statusElement) {
                        statusElement.textContent = 'Error: ' + data.message;
                        statusElement.classList.add('text-danger');
                    }
                }
            })
            .catch(error => {
                console.error('Error polling status:', error);
            });
    }, 1000);
}

function updateDispenseUI(state) {
    const statusElement = document.getElementById('dispensing-status');
    const progressBar = document.getElementById('dispensing-progress');
    
    if (!statusElement || !progressBar) return;
    
    // Update status message
    statusElement.textContent = state.message || 'Processing...';
    
    // Update progress bar
    if (state.progress !== undefined) {
        progressBar.style.width = state.progress + '%';
        progressBar.setAttribute('aria-valuenow', state.progress);
    }
}

function showOrderComplete() {
    // Hide dispensing screen, show order complete
    const dispensingScreen = document.getElementById('dispensing-screen');
    const orderCompleteScreen = document.getElementById('order-complete-screen');
    
    if (dispensingScreen) {
        dispensingScreen.classList.add('d-none');
    }
    
    if (orderCompleteScreen) {
        orderCompleteScreen.classList.remove('d-none');
    }
    
    // Update progress steps
    const stepDispensing = document.getElementById('step-dispensing');
    const stepPickup = document.getElementById('step-pickup');
    
    if (stepDispensing) {
        stepDispensing.classList.add('completed');
    }
    
    if (stepPickup) {
        stepPickup.classList.add('active');
    }
}

function displayErrorMessage(message, error) {
    console.error(message, error);
    
    // Display error in UI
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: message,
        footer: error ? error.toString() : ''
    });
}
