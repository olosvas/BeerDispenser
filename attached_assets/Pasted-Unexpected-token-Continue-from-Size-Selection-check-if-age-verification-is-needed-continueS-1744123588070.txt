Unexpected token '.'
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
 Automated Beer Dispenser
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
 Choose Your Beverage
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Select your beverage:

// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });  // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Beer
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Classic Czech lager

// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });  // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Kofola
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Traditional Czech cola

// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });  // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Birel
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
Non-alcoholic beer

// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });  // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });
 Premium Quality Beer |  Automated Dispensing

// Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); }); // Continue from Size Selection - check if age verification is needed continueSizeBtn.addEventListener('click', function() { // Update order summary const beverageTypeName = beverageTypeDisplay.textContent; orderSummary.textContent = `${beverageTypeName} (${selectedSize}ml)`; // First check if age verification is required for this beverage type fetch('/api/dispense', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ beverage_type: selectedBeverageType, volume_ml: parseInt(selectedSize) }) }) .then(response => { if (response.status === 403) { // Age verification is required beverageSizeSelection.classList.add('d-none'); ageVerification.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('active'); return Promise.reject('age_verification_required'); } return response.json(); }) .then(data => { if (data.success) { // No age verification needed, beverage dispensing started directly // Skip age verification step and go directly to dispensing beverageSizeSelection.classList.add('d-none'); dispensing.classList.remove('d-none'); stepSelection.classList.remove('active'); stepSelection.classList.add('completed'); stepVerification.classList.add('completed'); stepDispensing.classList.add('active'); // Reset dispensing animation liquid.style.height = '0%'; foam.style.bottom = '100%'; // Start monitoring the order orderInProgress = true; monitorOrderProgress(); } else { // Error starting dispensing dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.'; dispensingError.classList.remove('d-none'); } }) .catch(error => { // If this is not the expected age verification redirect, show an error if (error !== 'age_verification_required') { console.error('Error:', error); dispensingErrorMessage.textContent = 'An error occurred. Please try again.'; dispensingError.classList.remove('d-none'); } }); });