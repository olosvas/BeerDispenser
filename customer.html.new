{% extends 'layout.html' %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% block title %}Order Beverage{% endblock %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% block head %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
<style>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    :root {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        --beer-amber: #FFA500;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        --beer-foam: #f5f5f5;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        --kofola-brown: #4B2D1A;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        --birel-color: #FFC857;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-type-option,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-size-option {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        cursor: pointer;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border: 2px solid transparent;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-type-option:hover,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-size-option:hover {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        transform: translateY(-5px);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-type-option.selected,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-size-option.selected {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border-color: var(--bs-primary);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: rgba(255, 255, 255, 0.1);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .progress-container {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        max-width: 600px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        margin: 0 auto;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        position: relative;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        padding-bottom: 30px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step:not(:last-child):after {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        content: '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        position: absolute;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        left: 12px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        top: 30px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        height: calc(100% - 30px);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        width: 2px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--bs-gray-600);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step.completed:not(:last-child):after {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--bs-success);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step-icon {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        width: 26px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        height: 26px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border-radius: 50%;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--bs-gray-600);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        display: flex;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        align-items: center;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        justify-content: center;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        margin-right: 15px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step.active .step-icon {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--bs-primary);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .order-steps .step.completed .step-icon {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--bs-success);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .age-verification {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        max-width: 500px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        margin: 0 auto;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .beverage-ready-message {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        animation: pulse 2s infinite;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    @keyframes pulse {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        0% { transform: scale(1); }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        50% { transform: scale(1.05); }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        100% { transform: scale(1); }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    #beverage-animation {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        max-width: 200px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        margin: 20px auto;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .glass {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        position: relative;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        height: 250px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        width: 80px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: rgba(255, 255, 255, 0.1);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border: 2px solid rgba(255, 255, 255, 0.3);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border-top: none;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border-radius: 0 0 15px 15px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        margin: 0 auto;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        overflow: hidden;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .liquid {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        position: absolute;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        bottom: 0;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        left: 0;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        width: 100%;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        height: 0%;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        transition: height 1s ease-in-out;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .liquid.beer {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--beer-amber);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .liquid.kofola {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--kofola-brown);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .liquid.birel {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--birel-color);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    .foam {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        position: absolute;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        bottom: 100%;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        left: 0;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        width: 100%;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        height: 20px;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        background-color: var(--beer-foam);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        border-radius: 50% 50% 0 0;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        transition: bottom 1s ease-in-out;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
</style>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% endblock %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% block content %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
<div class="container">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Progress Steps -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div class="progress-container mb-5 d-none" id="progress-container">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="order-steps">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="step active" id="step-selection">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="d-flex align-items-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="step-icon">1</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div>Selection</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="step" id="step-verification">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="d-flex align-items-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="step-icon">2</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div>Age Verification</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="step" id="step-dispensing">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="d-flex align-items-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="step-icon">3</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div>Dispensing</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="step" id="step-pickup">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="d-flex align-items-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="step-icon">4</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div>Ready for Pickup</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Step 1: Beverage Type Selection -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div id="beverage-type-selection" class="card shadow-sm mb-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-header bg-dark">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h2 class="text-center mb-0"><i class="fas fa-glass-cheers me-2"></i> Choose Your Beverage</h2>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-body">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="text-center mb-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <p class="lead">Select your beverage:</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="row justify-content-center g-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="col-md-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="card beverage-type-option h-100" data-type="beer">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-beer fa-3x mb-3" style="color: #FFA500;"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <h3>Beer</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="text-muted">Classic Czech lager</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="col-md-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="card beverage-type-option h-100" data-type="kofola">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-glass-water fa-3x mb-3" style="color: #4B2D1A;"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <h3>Kofola</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="text-muted">Traditional Czech cola</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="col-md-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="card beverage-type-option h-100" data-type="birel">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-beer-mug-empty fa-3x mb-3" style="color: #FFC857;"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <h3>Birel</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="text-muted">Non-alcoholic beer</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="text-center mt-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <button id="continue-type-btn" class="btn btn-primary btn-lg" disabled>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-check-circle me-2"></i>Continue
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Step 2: Size Selection -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div id="beverage-size-selection" class="card shadow-sm mb-4 d-none">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-header bg-dark">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h2 class="text-center mb-0"><i class="fas fa-ruler me-2"></i> Select Size</h2>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-body">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="text-center mb-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <p class="lead">Select your preferred size:</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <p id="beverage-type-display" class="text-muted">Selected: <span></span></p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="row justify-content-center g-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="col-md-5">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="card beverage-size-option h-100" data-size="300">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-glass-water fa-3x mb-3 text-warning"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <h3>Small</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="mb-1">300ml</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="text-muted">Perfect for a quick refreshment</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="col-md-5">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="card beverage-size-option h-100" data-size="500">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-glass-water fa-4x mb-3 text-warning"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <h3>Large</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="mb-1">500ml</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <p class="text-muted">The ultimate thirst quencher</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="text-center mt-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <button id="back-to-type-btn" class="btn btn-secondary btn-lg me-2">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-arrow-left me-2"></i>Back
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <button id="continue-size-btn" class="btn btn-primary btn-lg" disabled>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-check-circle me-2"></i>Continue
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Step 3: Age Verification -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div id="age-verification" class="card shadow-sm mb-4 d-none">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-header bg-dark">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h2 class="text-center mb-0"><i class="fas fa-id-card me-2"></i> Age Verification</h2>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-body">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="age-verification">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="text-center mb-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <p class="lead">Please confirm you are of legal drinking age</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <p id="order-summary" class="text-muted">You've selected: <span></span></p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div id="verification-form" class="needs-validation">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="mb-3">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <label for="id-number" class="form-label">ID Number</label>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <input type="text" class="form-control" id="id-number" placeholder="Enter your ID number" required>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="invalid-feedback">Please provide a valid ID number.</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="mb-3">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <label for="birth-date" class="form-label">Date of Birth</label>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <input type="date" class="form-control" id="birth-date" required>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="invalid-feedback">Please provide your date of birth.</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="form-check mb-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <input class="form-check-input" type="checkbox" id="age-confirmation" required>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <label class="form-check-label" for="age-confirmation">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            I confirm that I am of legal drinking age
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </label>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <div class="invalid-feedback">You must confirm you are of legal drinking age.</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <button id="back-to-size-btn" class="btn btn-secondary btn-lg me-2">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-arrow-left me-2"></i>Back
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <button id="verify-age-btn" class="btn btn-primary btn-lg">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            <i class="fas fa-check-circle me-2"></i>Verify & Order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div id="verification-processing" class="text-center d-none">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div class="spinner-border text-primary mb-3" role="status">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <span class="visually-hidden">Loading...</span>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <p>Verifying your information...</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div id="verification-error" class="alert alert-danger text-center d-none" role="alert">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-exclamation-triangle me-2"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <span id="verification-error-message">Error verifying age. Please try again.</span>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Step 4: Dispensing Animation -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div id="dispensing" class="card shadow-sm mb-4 d-none">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-header bg-dark">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h2 class="text-center mb-0"><i class="fas fa-glass-cheers me-2"></i> Preparing Your Beverage</h2>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <p class="lead mb-4">Please wait while we prepare your drink...</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div id="beverage-animation">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="glass">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div id="liquid" class="liquid beer"></div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div id="foam" class="foam"></div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="dispensing-status mt-4">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="mb-3" id="dispensing-step-cup">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-circle text-muted me-2"></i> Dispensing cup...
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="mb-3 text-muted" id="dispensing-step-pour">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-circle text-muted me-2"></i> Pouring beverage...
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="mb-3 text-muted" id="dispensing-step-deliver">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <i class="fas fa-circle text-muted me-2"></i> Delivering to pickup station...
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div id="dispensing-error" class="alert alert-danger mt-4 d-none" role="alert">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <i class="fas fa-exclamation-triangle me-2"></i>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <span id="dispensing-error-message">An error occurred. Please contact staff for assistance.</span>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <!-- Step 5: Ready for Pickup -->
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    <div id="ready" class="card shadow-sm mb-4 d-none">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-header bg-success">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h2 class="text-center mb-0"><i class="fas fa-check-circle me-2"></i> Your Beverage is Ready!</h2>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        <div class="card-body text-center">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <h3 class="beverage-ready-message my-4">Please collect your beverage from the pickup station</h3>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <div class="card mb-4 bg-light">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <div class="card-body">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <h4 class="mb-3">Order Details</h4>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    <div id="ready-order-details" class="text-start">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <p><strong>Beverage:</strong> <span id="ready-beverage-type"></span></p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <p><strong>Size:</strong> <span id="ready-beverage-size"></span>ml</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        <p><strong>Order ID:</strong> <span id="ready-order-id"></span></p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <p>Thank you for using our automated beverage dispenser!</p>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            <button id="new-order-btn" class="btn btn-primary btn-lg mt-3">
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                <i class="fas fa-plus-circle me-2"></i>Place Another Order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            </button>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    </div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
</div>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% endblock %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }

    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% block scripts %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
<script>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
document.addEventListener('DOMContentLoaded', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // State variables
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    let selectedBeverageType = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    let selectedSize = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    let orderInProgress = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const beverageTypeOptions = document.querySelectorAll('.beverage-type-option');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const beverageSizeOptions = document.querySelectorAll('.beverage-size-option');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const continueTypeBtn = document.getElementById('continue-type-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const continueSizeBtn = document.getElementById('continue-size-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const backToTypeBtn = document.getElementById('back-to-type-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const backToSizeBtn = document.getElementById('back-to-size-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const beverageTypeDisplay = document.getElementById('beverage-type-display').querySelector('span');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Sections
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const progressContainer = document.getElementById('progress-container');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const beverageTypeSelection = document.getElementById('beverage-type-selection');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const beverageSizeSelection = document.getElementById('beverage-size-selection');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const ageVerification = document.getElementById('age-verification');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensing = document.getElementById('dispensing');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const ready = document.getElementById('ready');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Age Verification
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const orderSummary = document.getElementById('order-summary').querySelector('span');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const verifyAgeBtn = document.getElementById('verify-age-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const verificationForm = document.getElementById('verification-form');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const verificationProcessing = document.getElementById('verification-processing');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const verificationError = document.getElementById('verification-error');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const verificationErrorMessage = document.getElementById('verification-error-message');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Dispensing
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensingStepCup = document.getElementById('dispensing-step-cup');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensingStepPour = document.getElementById('dispensing-step-pour');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensingStepDeliver = document.getElementById('dispensing-step-deliver');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensingError = document.getElementById('dispensing-error');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const dispensingErrorMessage = document.getElementById('dispensing-error-message');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const liquid = document.getElementById('liquid');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const foam = document.getElementById('foam');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Ready
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const readyBeverageType = document.getElementById('ready-beverage-type');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const readyBeverageSize = document.getElementById('ready-beverage-size');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const readyOrderId = document.getElementById('ready-order-id');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const newOrderBtn = document.getElementById('new-order-btn');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Elements - Progress Steps
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const stepSelection = document.getElementById('step-selection');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const stepVerification = document.getElementById('step-verification');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const stepDispensing = document.getElementById('step-dispensing');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    const stepPickup = document.getElementById('step-pickup');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Beverage Type Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    beverageTypeOptions.forEach(option => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        option.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            beverageTypeOptions.forEach(opt => opt.classList.remove('selected'));
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            this.classList.add('selected');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            selectedBeverageType = this.dataset.type;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            continueTypeBtn.disabled = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            // Update beverage type display
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            const beverageName = this.querySelector('h3').textContent;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            beverageTypeDisplay.textContent = beverageName;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Beverage Size Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    beverageSizeOptions.forEach(option => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        option.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            beverageSizeOptions.forEach(opt => opt.classList.remove('selected'));
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            this.classList.add('selected');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            selectedSize = this.dataset.size;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            continueSizeBtn.disabled = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Type Selection to Size Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    continueTypeBtn.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageTypeSelection.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageSizeSelection.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        progressContainer.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Update the liquid class based on beverage type
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        liquid.className = 'liquid ' + selectedBeverageType;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Back to Type Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    backToTypeBtn.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageTypeSelection.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // First check if age verification is required for this beverage type
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        fetch('/api/dispense', {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            method: 'POST',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            headers: {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                'Content-Type': 'application/json',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            },
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            body: JSON.stringify({
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                beverage_type: selectedBeverageType,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                volume_ml: parseInt(selectedSize)
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(response => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (response.status === 403) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Age verification is required
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                return Promise.reject('age_verification_required');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            return response.json();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(data => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (data.success) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // No age verification needed, beverage dispensing started directly
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Skip age verification step and go directly to dispensing
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensing.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                stepVerification.classList.add('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                stepDispensing.classList.add('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Reset dispensing animation
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                liquid.style.height = '0%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                foam.style.bottom = '100%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Start monitoring the order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                orderInProgress = true;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                monitorOrderProgress();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            } else {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Error starting dispensing
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .catch(error => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            // If this is not the expected age verification redirect, show an error
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (error !== 'age_verification_required') {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                console.error('Error:', error);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Back to Size Selection
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    backToSizeBtn.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        ageVerification.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageSizeSelection.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepVerification.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepSelection.classList.remove('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepSelection.classList.add('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Verify Age and Start Order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    verifyAgeBtn.addEventListener('click', function(e) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        e.preventDefault();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Simple form validation
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const idNumber = document.getElementById('id-number').value;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const birthDate = document.getElementById('birth-date').value;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const ageConfirmation = document.getElementById('age-confirmation').checked;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        if (!idNumber || !birthDate || !ageConfirmation) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            verificationForm.classList.add('was-validated');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            return;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Show processing state
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationForm.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationProcessing.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationError.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // API call to verify age
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const verificationData = {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            id_number: idNumber,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            birth_date: birthDate,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            beverage_type: selectedBeverageType
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        };
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        fetch('/api/verify_age', {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            method: 'POST',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            headers: {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                'Content-Type': 'application/json',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            },
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            body: JSON.stringify(verificationData)
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(response => response.json())
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(data => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (data.verified) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Age verified, start dispensing
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                startDispensing();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            } else {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Age verification failed
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                verificationErrorMessage.textContent = data.message || 'Age verification failed. You must be at least 18 years old.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                verificationError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                verificationForm.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                verificationProcessing.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .catch(error => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            console.error('Error:', error);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            verificationErrorMessage.textContent = 'An error occurred. Please try again.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            verificationError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            verificationForm.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            verificationProcessing.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Start the dispensing process
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    function startDispensing() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Change to dispensing view
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        ageVerification.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        dispensing.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepVerification.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepVerification.classList.add('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepDispensing.classList.add('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset dispensing animation
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        liquid.style.height = '0%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        foam.style.bottom = '100%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Prepare order data
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const orderData = {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            beverage_type: selectedBeverageType,
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            volume_ml: parseInt(selectedSize)
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        };
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Start the order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        orderInProgress = true;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        fetch('/api/dispense', {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            method: 'POST',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            headers: {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                'Content-Type': 'application/json',
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            },
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            body: JSON.stringify(orderData)
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(response => response.json())
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .then(data => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (data.success) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Order started successfully
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                monitorOrderProgress();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            } else {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                // Order failed to start
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                dispensingError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                setTimeout(() => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    resetToSelection();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                }, 5000);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        .catch(error => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            console.error('Error:', error);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            setTimeout(() => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                resetToSelection();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }, 5000);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Monitor the order progress
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    function monitorOrderProgress() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        const progressInterval = setInterval(() => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            if (!orderInProgress) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                clearInterval(progressInterval);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                return;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            fetch('/api/state')
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                .then(response => response.json())
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                .then(data => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    updateDispensingAnimation(data.state);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    if (data.state === 'error') {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        // Error occurred
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        orderInProgress = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        dispensingErrorMessage.textContent = data.error_message || 'An error occurred during dispensing.';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        dispensingError.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        clearInterval(progressInterval);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        setTimeout(() => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                            resetToSelection();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        }, 5000);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    } else if (data.state === 'idle' && data.last_order_complete) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        // Order completed
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        orderInProgress = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        clearInterval(progressInterval);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                        showOrderComplete(data.order_id);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                })
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                .catch(error => {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
                    console.error('Error:', error);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        }, 1000);
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Update the dispensing animation based on system state
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    function updateDispensingAnimation(state) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Update step indicators
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        if (state === 'dispensing_cup') {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepCup.innerHTML = '<i class="fas fa-circle-notch fa-spin text-primary me-2"></i> Dispensing cup...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepPour.innerHTML = '<i class="fas fa-circle text-muted me-2"></i> Pouring beverage...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepDeliver.innerHTML = '<i class="fas fa-circle text-muted me-2"></i> Delivering to pickup station...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        } else if (state === 'pouring_beverage') {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepCup.innerHTML = '<i class="fas fa-check-circle text-success me-2"></i> Cup dispensed';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepPour.innerHTML = '<i class="fas fa-circle-notch fa-spin text-primary me-2"></i> Pouring beverage...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepDeliver.innerHTML = '<i class="fas fa-circle text-muted me-2"></i> Delivering to pickup station...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            // Animate the beverage pouring
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            liquid.style.height = '80%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            foam.style.bottom = '80%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        } else if (state === 'delivering_cup') {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepCup.innerHTML = '<i class="fas fa-check-circle text-success me-2"></i> Cup dispensed';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepPour.innerHTML = '<i class="fas fa-check-circle text-success me-2"></i> Beverage poured';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
            dispensingStepDeliver.innerHTML = '<i class="fas fa-circle-notch fa-spin text-primary me-2"></i> Delivering to pickup station...';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Show the order complete screen
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    function showOrderComplete(orderId) {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Update the ready screen
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        readyBeverageType.textContent = beverageTypeDisplay.textContent;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        readyBeverageSize.textContent = selectedSize;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        readyOrderId.textContent = orderId || 'N/A';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Switch to ready screen
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        dispensing.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        ready.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepDispensing.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepDispensing.classList.add('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepPickup.classList.add('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Reset to selection screen
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    function resetToSelection() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset selection state
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        selectedBeverageType = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        selectedSize = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        orderInProgress = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset form
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        document.getElementById('id-number').value = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        document.getElementById('birth-date').value = '';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        document.getElementById('age-confirmation').checked = false;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationForm.classList.remove('was-validated');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationForm.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationProcessing.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        verificationError.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset selection UI
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageTypeOptions.forEach(opt => opt.classList.remove('selected'));
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageSizeOptions.forEach(opt => opt.classList.remove('selected'));
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        continueTypeBtn.disabled = true;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        continueSizeBtn.disabled = true;
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset animation
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        liquid.style.height = '0%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        foam.style.bottom = '100%';
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Show selection screen
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        ready.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        dispensing.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        ageVerification.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        beverageTypeSelection.classList.remove('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        // Reset progress steps
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        progressContainer.classList.add('d-none');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepSelection.classList.add('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepSelection.classList.remove('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepVerification.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepVerification.classList.remove('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepDispensing.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepDispensing.classList.remove('completed');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        stepPickup.classList.remove('active');
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Place another order
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    newOrderBtn.addEventListener('click', function() {
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        resetToSelection();
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
</script>
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
{% endblock %}
    // Continue from Size Selection - check if age verification is needed
        
        // First check if age verification is required for this beverage type
        fetch('/api/dispense', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                beverage_type: selectedBeverageType,
                volume_ml: parseInt(selectedSize)
            })
        })
        .then(response => {
            if (response.status === 403) {
                // Age verification is required
                return Promise.reject('age_verification_required');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // No age verification needed, beverage dispensing started directly
                // Skip age verification step and go directly to dispensing
                dispensing.classList.remove('d-none');
                stepVerification.classList.add('completed');
                stepDispensing.classList.add('active');
                
                // Reset dispensing animation
                liquid.style.height = '0%';
                foam.style.bottom = '100%';
                
                // Start monitoring the order
                orderInProgress = true;
                monitorOrderProgress();
            } else {
                // Error starting dispensing
                dispensingErrorMessage.textContent = data.message || 'Failed to start the order. Please try again.';
                dispensingError.classList.remove('d-none');
            }
        })
        .catch(error => {
            // If this is not the expected age verification redirect, show an error
            if (error !== 'age_verification_required') {
                console.error('Error:', error);
                dispensingErrorMessage.textContent = 'An error occurred. Please try again.';
                dispensingError.classList.remove('d-none');
            }
